#!/bin/bash
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -ex
IVY_MIRROR_PROP=${IVY_MIRROR_PROP:-http://repo1.maven.org/maven2/}

if [ -z "$GIT_REPO" ]; then
    BUILD_OPTS="-Dversion=${FULL_VERSION}                                  \
            -Dslf4j.binding=slf4j-log4j12 -Dexclude.from.war=nothing   \
            -Divy.home=${HOME}/.ivy2 -Drepo.maven.org=$IVY_MIRROR_PROP \
            -Divy_install_path=${HOME}/.ant/lib -lib ${HOME}/.ant/lib  \
            -Dreactor.repo=file://${HOME}/.m2/repository${M2_REPO_SUFFIX}"

# FIXME: this needs to be fixed at the product level
    ant $BUILD_OPTS ivy-bootstrap
    mkdir -p solr/test-framework/lib || :

    ant $BUILD_OPTS clean

# Build source package
    (cd solr ; ant $BUILD_OPTS package-local-src-tgz "$@")

# If DO_MAVEN_DEPLOY == deploy, run the generate-maven-artifacts target
# For purposes of deploying to Maven, we skip the Sentry contrib package,
# which introduces a thorny and hard to satisfy sentry dependency.
# The bash array usage here (and de-reference using "${...[@]}") makes sure
# that bash doesn't expand the **, while keeping the two -D's as separate
# arguments to ant.
    MAVEN_DEPLOY_OPTS=(-Dcontrib-crawl.exclude=contrib/sentry-handlers/build.xml -Dmaven-deps.exclude="**/sentry-handlers/**")
    if [ "${DO_MAVEN_DEPLOY}" == "deploy" ]; then
        ant $BUILD_OPTS "${MAVEN_DEPLOY_OPTS[@]}" generate-maven-artifacts "$@"
    fi

    if [ -z "${MAVEN_ONLY}" ]; then
# Build Solr package (and if we didn't do generate-maven-artifacts, it'll build everything else it needs
        (cd solr ; ant $BUILD_OPTS create-package "$@")
        
# Putting the build artifact in place
        rm -rf build
        mkdir build
        pushd build
        tar -xzf ../solr/build/solr-*-src.tgz
        tar -C solr-* --strip-components=1 -xzf ../solr/package/solr-*.tgz
        cp -r ../cloudera* solr-${FULL_VERSION}
        cp -r ../cdh.build.properties solr-${FULL_VERSION}
        tar -czf solr-${FULL_VERSION}.tar.gz solr-${FULL_VERSION}
        popd
    fi

# Change to cloudera/maven directory, and install
# (and if called from CDH nightly build, deploy) artifacts into Maven repository
# cd cloudera/maven-packaging
# mvn -Dnot.cdh.release.build=false install -Dmaven.repo.local=${HOME}/.m2/repository $DO_MAVEN_DEPLOY
else
    mvn -f cloudera-pom.xml process-resources
    git add .
    git commit -a -m "Temporary commit for tarball"
    mkdir -p build
    git archive --prefix=solr-${FULL_VERSION}/ --format=tar HEAD |gzip > build/solr-${FULL_VERSION}.tar.gz
fi
