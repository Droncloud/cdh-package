#!/bin/bash
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -ex

[ -f cdh-parcel.props ] && . cdh-parcel.props

PKG_ARCHIVE=${PKG_ARCHIVE:-"http://repos.jenkins.cloudera.com/cdh4-nightly/"}
CDH_VERSION=${CDH_VERSION:-"4"}

# If PKG_FORMAT not specified assume tarballs
if [ -z "$PKG_FORMAT" ] ; then
  rm -rf build
  mkdir build
  cat > build/cdh-parcel.props <<__EOT__
PKG_ARCHIVE="$PKG_ARCHIVE"
CDH_VERSION="$CDH_VERSION"
__EOT__
  tar -C build -czf build/cdh-parcel-${FULL_VERSION}.tar.gz cdh-parcel.props
  exit 0
fi

REDHAT_RELEASES="rhel|redhat|centos|red.hat"
SUSE_RELEASES="suse|sles"
UBUNTU_RELEASES="lucid|maverick|precise"
ARC="`uname -m`"

if [ "$ARC" = "x86_64" ] ; then
  DEB_ARC="amd64"
else
  DEB_ARC="i386"
fi

# The following block is quite messy, since it has
# to account for different URL schemas for different
# types of repos
if egrep -i $UBUNTU_RELEASES /etc/*release ;then
  for release in `echo $UBUNTU_RELEASES | tr '|' ' '` ; do
    if fgrep -q $release /etc/*release ; then
      PKGS="`curl ${PKG_ARCHIVE}/ubuntu/${release}/${DEB_ARC}/cdh/dists/${release}-cdh${CDH_VERSION}/contrib/binary-${DEB_ARC}/Packages 2>/dev/null | \
             sed -ne '/^Filename:/s#^Filename: #'"${PKG_ARCHIVE}/ubuntu/${release}/${DEB_ARC}/cdh/"'#p'`"
    fi
  done
elif [ -f /etc/debian_version ] ;then
  release=squeeze
  PKGS="`curl ${PKG_ARCHIVE}/debian/${release}/${DEB_ARC}/cdh/dists/${release}-cdh${CDH_VERSION}/contrib/binary-${DEB_ARC}/Packages 2>/dev/null | \
         sed -ne '/^Filename:/s#^Filename: #'"${PKG_ARCHIVE}/debian/${release}/${DEB_ARC}/cdh/"'#p'`"
elif egrep -i $REDHAT_RELEASES /etc/*release ;then
  if fgrep "6." /etc/*release ;then
    PKGS="${PKG_ARCHIVE}/redhat/6/${ARC}/cdh/${CDH_VERSION}/RPMS"
  else
    PKGS="${PKG_ARCHIVE}/redhat/5/${ARC}/cdh/${CDH_VERSION}/RPMS"
  fi
elif egrep -i $SUSE_RELEASES /etc/*release ;then
  PKGS="${PKG_ARCHIVE}/sles/11/${ARC}/cdh/${CDH_VERSION}/RPMS/"
else
  echo "Looks like we don't support the following OS:"
  cat /etc/*release
  exit 1
fi

# Download the packages
rm -rf dl
mkdir dl
(cd dl ; wget -N -r -l2 --no-parent $PKGS)

# Make sure we filter out the most recent versions of the packages
#RPMS=`find dl -name \*.rpm -printf '%p\t'  -exec rpm -q --qf '%{NAME}\n' -p {} \; 2>/dev/null`
#DEBS=`find dl -name \*.deb -printf '%p\t'  -exec bash -c 'dpkg -I {} | grep Package: | cut -f3 -d\  ' \; 2>/dev/null` 

# Unpack the bits
rm -rf build
mkdir -p build/seen

# We don't want to recurse into ourselves 
rm -rf `find dl -type f -name cdh-parcel\*`

for pkg in $(ls -t `find dl -type f`) ; do
  case $pkg in
     *.deb) PKG_NAME=`dpkg -I $pkg | grep Package: | cut -f3 -d\  `
            if [ ! -f build/seen/$PKG_NAME ] ; then
              PKG_VERSION=`dpkg -I $pkg | grep Version: | cut -f2 -d:`
              dpkg -x $pkg ./build
              echo $PKG_VERSION > build/seen/${PKG_NAME}
            fi
            ;;
     *.rpm) PKG_NAME=`rpm -q --qf '%{NAME}' -p $pkg`
            if [ ! -f build/seen/$PKG_NAME ] ; then
              PKG_VERSION=`rpm -q --qf '%{VERSION}' -p $pkg`
              rpm2cpio $pkg | (cd build ; cpio -i --make-directories)
              echo $PKG_VERSION > build/seen/$PKG_NAME
            fi
            ;;
  esac
  rm $pkg
done

# Fix the symlinks
for link in `find build/usr/lib/ -type l` ; do
  target=`readlink $link`
  TOPDIR=`echo $link | sed -e 's#^build/usr/lib/##' -e 's#[^/]\+#..#g' -e 's#/..$##'`
  case $target in
    /etc/*/conf)
                mkdir -p build/usr/`dirname $target` || :
                rm -f $link
                ln -s $TOPDIR/../etc/`echo $target | cut -f3 -d/`  $link
                ;;
    /usr/lib/*)
                rm -f $link
                ln -s $TOPDIR/`echo $target |sed -e 's#/usr/lib/##'` $link
                ;;
  esac
done

# FIXME: special handling for Hue
HUE_APPS="beeswax about filebrowser help jobbrowser jobsub oozie proxy useradmin shell"
rm -f build/usr/share/hue/desktop/conf
cp -r build/etc/hue build/usr/share/hue/desktop/conf
pushd build/usr/share/hue
 /bin/bash -x ./tools/relocatable.sh
 for app in $HUE_APPS ; do
   ROOT=`pwd` DESKTOP_LOGLEVEL=WARN DESKTOP_LOG_DIR=/tmp ./build/env/bin/python ./tools/app_reg/app_reg.py --install `pwd`/apps/$app
 done
 /bin/bash -x ./tools/relocatable.sh
 find . -name '*.py[oc]' -exec rm -f {} \;
 sed -i -e '/"path"/s#:.*".*share/hue#: ".#g' app.reg
popd

# Figure out the location of bigtop-utils
if [ -d build/usr/lib/bigtop-utils ] ; then
  BIGTOP_UTILS_HOME=lib/bigtop-utils
else
  BIGTOP_UTILS_HOME=libexec/bigtop-utils
fi

DISTRO_LESS_FULL_VERSION=`echo $CDH_PARCEL_CUSTOM_VERSION | sed -e 's#\.[^\.]*$##'`
DASH_SEPARATED_CUSTOM_VERSION=`echo $CDH_PARCEL_CUSTOM_VERSION | sed -e 's/\.\([^\.]*\)$/-\1/'`

# Create a bunch of metadata
mkdir -p build/meta
(cat <<__EOT__
{
  "name":               "CDH",
  "version":            "$DISTRO_LESS_FULL_VERSION",
  "extraVersionInfo": {
    "fullVersion":        "$DASH_SEPARATED_CUSTOM_VERSION",
    "baseVersion":        "$CDH_PARCEL_BASE_VERSION",
    "patchCount":         "$CDH_CUSTOMER_PATCH"
  },
  "minPrevVersion":     "$CDH_MIN_PREV_VERSION",
  "maxPrevVersion":     "$CDH_MAX_PREV_VERSION",

  "setActiveSymlink":   false,

  "scripts": {
    "defines": "cdh_env.sh",
    "alternatives": "cdh_alternatives.sh"
  },

  "packages": [
__EOT__

JSON_IS_STUPID=""
for pkg in build/seen/* ; do
  cat <<__EOT__
    ${JSON_IS_STUPID}{ "name":    "`basename $pkg`",
      "version": "`cat $pkg`"
    }
__EOT__
  JSON_IS_STUPID=","
done

cat <<__EOT__
  ],

  "components": [
__EOT__

JSON_IS_STUPID=""
for comp in build/usr/lib/*/cloudera/cdh_version.properties ; do
  cat <<__EOT__
    ${JSON_IS_STUPID}{ "name":     "`sed -ne 's/^cloudera.pkg.name=//p' $comp`",
      "version":  "`sed -ne 's/^version=//p' $comp`"
    }
__EOT__
  JSON_IS_STUPID=","
done

cat <<__EOT__
  ],

  "users": {
     "flume": {
       "longname"    : "Flume",
       "home"        : "/var/run/flume",
       "shell"       : "/bin/false",
       "extra_groups": [ ]
     },
     "httpfs": {
       "longname"    : "Hadoop HTTPFS",
       "home"        : "/var/run/hadoop-httpfs",
       "shell"       : "/bin/bash",
       "extra_groups": [ ]
     },
     "hdfs": {
       "longname"    : "Hadoop HDFS",
       "home"        : "/var/lib/hadoop-hdfs",
       "shell"       : "/bin/bash",
       "extra_groups": [ "hadoop" ]
     },
     "yarn": {
       "longname"    : "Hadoop Yarn",
       "home"        : "/var/lib/hadoop-yarn",
       "shell"       : "/bin/bash",
       "extra_groups": [ "hadoop" ]
     },
     "mapred": {
       "longname"    : "Hadoop MapReduce",
       "home"        : "/var/lib/hadoop-mapreduce",
       "shell"       : "/bin/bash",
       "extra_groups": [ "hadoop" ]
     },
     "hbase": {
       "longname"    : "HBase",
       "home"        : "/var/run/hbase",
       "shell"       : "/bin/false",
       "extra_groups": [ ]
     },
     "hive": {
       "longname"    : "Hive",
       "home"        : "/var/lib/hive",
       "shell"       : "/bin/false",
       "extra_groups": [ ]
     },
     "hue": {
       "longname"    : "Hue",
       "home"        : "/usr/share/hue",
       "shell"       : "/bin/false",
       "extra_groups": [ ]
     },
     "oozie": {
       "longname"    : "Oozie User",
       "home"        : "/var/lib/oozie",
       "shell"       : "/bin/false",
       "extra_groups": [ ]
     },
     "sqoop": {
       "longname"    : "Sqoop",
       "home"        : "/var/lib/sqoop",
       "shell"       : "/bin/false",
       "extra_groups": [ ]
     },
     "zookeeper": {
       "longname"    : "ZooKeeper",
       "home"        : "/var/run/zookeeper",
       "shell"       : "/bin/false",
       "extra_groups": [ ]
     }
  },

  "groups": [
     "hadoop"
  ]
}
__EOT__
) > build/meta/parcel.json

# Now take care of permissions
cat > build/meta/permissions.json <<__EOT__
{
  "lib/hadoop-0.20-mapreduce/sbin/Linux-amd64-64/task-controller": {
    "user":  "root",
    "group": "mapred",
    "permissions": "4754"
  },
  "lib/hadoop-yarn/bin/container-executor": {
    "user":  "root",
    "group": "yarn",
    "permissions": "6050"
  },
  "share/hue/apps/shell/src/shell/build/setuid": {
    "user":  "root",
    "group": "hue",
    "permissions": "4750"
  },
  "share/hue/desktop": {
    "user":  "hue",
    "group": "hue",
    "permissions": "0755"
  },
  "share/hue/desktop/desktop.db": {
    "user":  "hue",
    "group": "hue",
    "permissions": "0644"
  }
}
__EOT__

# cdh_env.sh
(echo "#!/bin/bash"
#cat build/etc/default/* | grep -v '^[ 	]*#' |\
#                          grep -v '^[ 	]*$' |\
#                          grep -v '_HOME='   |\
#                          grep -v '/etc'     | sort -u
#echo
cat <<__EOT__
export CDH_HADOOP_HOME=\$PARCELS_ROOT/CDH-$DISTRO_LESS_FULL_VERSION/lib/hadoop
export CDH_MR1_HOME=\$PARCELS_ROOT/CDH-$DISTRO_LESS_FULL_VERSION/lib/hadoop-0.20-mapreduce
export CDH_HDFS_HOME=\$PARCELS_ROOT/CDH-$DISTRO_LESS_FULL_VERSION/lib/hadoop-hdfs
export CDH_HTTPFS_HOME=\$PARCELS_ROOT/CDH-$DISTRO_LESS_FULL_VERSION/lib/hadoop-httpfs
export CDH_MR2_HOME=\$PARCELS_ROOT/CDH-$DISTRO_LESS_FULL_VERSION/lib/hadoop-mapreduce
export CDH_YARN_HOME=\$PARCELS_ROOT/CDH-$DISTRO_LESS_FULL_VERSION/lib/hadoop-yarn
export CDH_HBASE_HOME=\$PARCELS_ROOT/CDH-$DISTRO_LESS_FULL_VERSION/lib/hbase
export CDH_ZOOKEEPER_HOME=\$PARCELS_ROOT/CDH-$DISTRO_LESS_FULL_VERSION/lib/zookeeper
export CDH_HIVE_HOME=\$PARCELS_ROOT/CDH-$DISTRO_LESS_FULL_VERSION/lib/hive
export CDH_HUE_HOME=\$PARCELS_ROOT/CDH-$DISTRO_LESS_FULL_VERSION/share/hue
export CDH_OOZIE_HOME=\$PARCELS_ROOT/CDH-$DISTRO_LESS_FULL_VERSION/lib/oozie
export CDH_HUE_PLUGINS_HOME=\$PARCELS_ROOT/CDH-$DISTRO_LESS_FULL_VERSION/lib/hadoop
export CDH_FLUME_HOME=\$PARCELS_ROOT/CDH-$DISTRO_LESS_FULL_VERSION/lib/flume-ng
export CDH_PIG_HOME=\$PARCELS_ROOT/CDH-$DISTRO_LESS_FULL_VERSION/lib/pig
export TOMCAT_HOME=\$PARCELS_ROOT/CDH-$DISTRO_LESS_FULL_VERSION/lib/bigtop-tomcat
export JSVC_HOME=\$PARCELS_ROOT/CDH-$DISTRO_LESS_FULL_VERSION/$BIGTOP_UTILS_HOME
export CDH_HADOOP_BIN=\$CDH_HADOOP_HOME/bin/hadoop
export HIVE_DEFAULT_XML=\$PARCELS_ROOT/CDH-$DISTRO_LESS_FULL_VERSION/lib/hive/conf/hive-default.xml
__EOT__
) > build/meta/cdh_env.sh

# cdh_alternatives.sh
cat > build/meta/cdh_alternatives.sh <<__EOT__
#!/bin/bash
echo "This script does nothing for now, since the location of the only alternatives that the"
echo "packages support (/etc/<component>/conf) are not given to us by CM, and the"
echo "/usr/bin/<component> alternatives need to be implemented by CDH."
__EOT__

# Magically manipulate the bin scripts to point to ../lib instead of /usr/lib
# Ideally we would want alternatives configuration for bin scripts as well
for file in build/usr/bin/*; do
  # Insert a command that sets the LIB_DIR we want to use
  sed -i '1aBIN_DIR=`which $0`\nBIN_DIR=`dirname $BIN_DIR`\nLIB_DIR=$BIN_DIR/../lib\n' $file
  # Replace /usr/lib with the LIB_DIR variable we set in the above line
  sed -i 's:/usr/lib/:\$LIB_DIR/:' $file
done
