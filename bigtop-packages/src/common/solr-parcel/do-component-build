#!/bin/bash
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -ex

[ -f solr-parcel.props ] && . solr-parcel.props

PKG_ARCHIVE=${PKG_ARCHIVE:-"http://repos.jenkins.cloudera.com/search1.1-nightly/"}
PKG_SOLR_VERSION=${PKG_SOLR_VERSION:-"1"}

# If PKG_FORMAT not specified assume tarballs
if [ -z "$PKG_FORMAT" ] ; then
  rm -rf build
  mkdir build
  cat > build/solr-parcel.props <<__EOT__
PKG_ARCHIVE="$PKG_ARCHIVE"
PKG_SOLR_VERSION="$PKG_SOLR_VERSION"
__EOT__
  tar -C build -czf build/solr-parcel-${FULL_VERSION}.tar.gz solr-parcel.props
  exit 0
fi

REDHAT_RELEASES="rhel|redhat|centos|red.hat"
SUSE_RELEASES="suse|sles"
UBUNTU_RELEASES="lucid|precise"
ARC="`uname -m`"

if [ "$ARC" = "x86_64" ] ; then
  DEB_ARC="amd64"
else
  DEB_ARC="i386"
fi

# The following block is quite messy, since it has
# to account for different URL schemas for different
# types of repos
if egrep -i $UBUNTU_RELEASES /etc/*release ;then
  for release in `echo $UBUNTU_RELEASES | tr '|' ' '` ; do
    if fgrep -q $release /etc/*release ; then
      PKGS="`curl ${PKG_ARCHIVE}/ubuntu/${release}/${DEB_ARC}/search/dists/${release}-search${PKG_SOLR_VERSION}/contrib/binary-${DEB_ARC}/Packages 2>/dev/null | \
             sed -ne '/^Filename:/s#^Filename: #'"${PKG_ARCHIVE}/ubuntu/${release}/${DEB_ARC}/search/"'#p'`"
    fi
  done
elif [ -f /etc/debian_version ] ;then
  release=squeeze
  PKGS="`curl ${PKG_ARCHIVE}/debian/${release}/${DEB_ARC}/search/dists/${release}-search${PKG_SOLR_VERSION}/contrib/binary-${DEB_ARC}/Packages 2>/dev/null | \
         sed -ne '/^Filename:/s#^Filename: #'"${PKG_ARCHIVE}/debian/${release}/${DEB_ARC}/search/"'#p'`"
elif egrep -i $REDHAT_RELEASES /etc/*release ;then
  if fgrep "6." /etc/*release ;then
    PKGS="${PKG_ARCHIVE}/redhat/6/${ARC}/search/${PKG_SOLR_VERSION}/RPMS"
  else
    PKGS="${PKG_ARCHIVE}/redhat/5/${ARC}/search/${PKG_SOLR_VERSION}/RPMS"
  fi
elif egrep -i $SUSE_RELEASES /etc/*release ;then
  PKGS="${PKG_ARCHIVE}/sles/11/${ARC}/search/${PKG_SOLR_VERSION}/RPMS/"
else
  echo "Looks like we don't support the following OS:"
  cat /etc/*release
  exit 1
fi

# Download the packages
rm -rf dl
mkdir dl
(cd dl ; wget -N -r -l2 --no-parent $PKGS)

# Make sure we filter out the most recent versions of the packages
#RPMS=`find dl -name \*.rpm -printf '%p\t'  -exec rpm -q --qf '%{NAME}\n' -p {} \; 2>/dev/null`
#DEBS=`find dl -name \*.deb -printf '%p\t'  -exec bash -c 'dpkg -I {} | grep Package: | cut -f3 -d\  ' \; 2>/dev/null` 

# Unpack the bits
rm -rf build
mkdir -p build/seen

# Create metadata directory
mkdir -p build/meta

# We don't want to recurse into ourselves 
rm -rf `find dl -type f -name solr-parcel\*`

(
echo "{"
JSON_IS_STUPID=""
for pkg in $(ls -t `find dl -type f`) ; do
  case $pkg in
     *.deb) PKG_NAME=`dpkg -I $pkg | grep Package: | awk '{ print $2 }'`
            if [ ! -f build/seen/$PKG_NAME ] ; then
              PKG_VERSION=`dpkg -I $pkg | grep Version: | awk '{ print $2 }'`
              dpkg -x $pkg ./build
              echo $PKG_VERSION > build/seen/${PKG_NAME}
              echo "  ${JSON_IS_STUPID} \"$PKG_NAME\" : {"
              echo "    \"name\": \"$PKG_NAME\","
              echo "    \"version\": \"$PKG_VERSION\","
              echo "    \"files\" : {"
              dpkg-deb -c $pkg | awk '{ print "\"" $6 "\" : {}" }' | sed -e 's/$/,/'
              echo "    }"
              echo "  }"
              JSON_IS_STUPID=","
            fi
            ;;
     *.rpm) PKG_NAME=`rpm -q --qf '%{NAME}' -p $pkg`
            if [ ! -f build/seen/$PKG_NAME ] ; then
              PKG_VERSION=`rpm -q --qf '%{VERSION}' -p $pkg`
              rpm2cpio $pkg | (cd build ; cpio -i --make-directories)
              echo $PKG_VERSION > build/seen/$PKG_NAME
              echo "  ${JSON_IS_STUPID} \"$PKG_NAME\" : {"
              echo "    \"name\": \"$PKG_NAME\","
              echo "    \"version\": \"$PKG_VERSION\","
              echo "    \"files\" : {"
              rpm -qpl $pkg | awk '{ print "\"" $1 "\" : {}" }' | sed -e 's/$/,/'
              echo "    }"
              echo "  }"
              JSON_IS_STUPID=","
            fi
            ;;
  esac
  rm $pkg
done
echo "}"
) > build/meta/filelist.json
# Rewrite paths to be relative to parcel root (RPMs)
perl -pi -e 's#^"/etc/#      "etc/#' build/meta/filelist.json
perl -pi -e 's#^"/usr/#      "#' build/meta/filelist.json
perl -0pi -e 's#"/var/.*\n##g' build/meta/filelist.json
# Rewrite paths to be relative to parcel root (debs)
perl -0pi -e 's#"\./" : {},\n##g' build/meta/filelist.json
perl -0pi -e 's#"\./usr/" : {},\n##g' build/meta/filelist.json
perl -pi -e 's#^"\./etc/#      "etc/#' build/meta/filelist.json
perl -pi -e 's#^"\./usr/#      "#' build/meta/filelist.json
perl -0pi -e 's#"\./var/.*\n##g' build/meta/filelist.json
# Handle empty rpms
perl -pi -e 's/\(contains no files\)//' build/meta/filelist.json
# Remove trailing commas
perl -0pi -e's/,\n\    }/\n\    }/g' build/meta/filelist.json

# Fix the symlinks
for link in `find build/usr/lib/ -type l` ; do
  target=`readlink $link`
  TOPDIR=`echo $link | sed -e 's#^build/usr/lib/##' -e 's#[^/]\+#..#g'`
  case $target in
    /usr/lib/*)
                rm -f $link
                ln -s $TOPDIR/lib/`echo $target |sed -e 's#/usr/lib/##'` $link
                ;;
    /usr/share/*)
                rm -f $link
                ln -s $TOPDIR/share/`echo $target |sed -e 's#/usr/share##'` $link
  esac
done

#TODO: Do any solr specific post-install stuff here

if [ -d build/usr/lib/bigtop-utils ] ; then
  BIGTOP_UTILS_HOME=lib/bigtop-utils
else
  BIGTOP_UTILS_HOME=libexec/bigtop-utils
fi

DISTRO_LESS_FULL_VERSION=`echo $SOLR_PARCEL_CUSTOM_VERSION | sed -e 's#\.[^\.]*$##'`
DASH_SEPARATED_CUSTOM_VERSION=`echo $SOLR_PARCEL_CUSTOM_VERSION | sed -e 's/\.\([^\.]*\)$/-\1/'`

# Create a bunch of metadata
(cat <<__EOT__
{
  "name":               "SOLR",
  "version":            "$DISTRO_LESS_FULL_VERSION",
  "extraVersionInfo": {
    "fullVersion":        "$DASH_SEPARATED_CUSTOM_VERSION",
    "baseVersion":        "$SOLR_PARCEL_BASE_VERSION",
    "patchCount":         "$SOLR_CUSTOMER_PATCH"
  },
  "minPrevVersion":     "$SOLR_MIN_PREV_VERSION",
  "maxPrevVersion":     "$SOLR_MAX_PREV_VERSION",

  "setActiveSymlink":   true,

  "scripts": {
    "defines": "solr_env.sh",
    "alternatives": "solr_alternatives.sh"
  },

  "packages": [
__EOT__

JSON_IS_STUPID=""
for pkg in build/seen/* ; do
  cat <<__EOT__
    ${JSON_IS_STUPID}{ "name":    "`basename $pkg`",
      "version": "`cat $pkg`"
    }
__EOT__
  JSON_IS_STUPID=","
done

cat <<__EOT__
  ],

  "components": [
__EOT__

JSON_IS_STUPID=""
for comp in build/usr/lib/*/cloudera/cdh_version.properties ; do
  cat <<__EOT__
    ${JSON_IS_STUPID}{ "name":     "`sed -ne 's/^cloudera.pkg.name=//p' $comp`",
      "version":  "`sed -ne 's/^version=//p' $comp`",
      "pkg_version":  "`sed -ne 's/^cloudera.pkg.version=//p' $comp`" 
    }
__EOT__
  JSON_IS_STUPID=","
done

cat <<__EOT__
  ],

  "provides": [
    "solr",
    "flume-plugin",
    "hbase-plugin",
    "hue-plugin"
  ],

  "users": {
     "solr": {
       "longname"    : "Solr",
       "home"        : "/var/run/solr",
       "shell"       : "/sbin/nologin",
       "extra_groups": [ ]
     }
  },

  "groups": [ ]
}
__EOT__
) > build/meta/parcel.json

# Now take care of permissions
cat > build/meta/permissions.json <<__EOT__
{
}
__EOT__

# solr_env.sh
(echo "#!/bin/bash"
#cat build/etc/default/* | grep -v '^[ 	]*#' |\
#                          grep -v '^[ 	]*$' |\
#                          grep -v '_HOME='   |\
#                          grep -v '/etc'     | sort -u
#echo
cat <<__EOT__
SOLR_DIRNAME=\${PARCEL_DIRNAME:-"SOLR-$DISTRO_LESS_FULL_VERSION"}
export CDH_SOLR_HOME=\$PARCELS_ROOT/\$SOLR_DIRNAME/lib/solr
if [ -z \$FLUME_PLUGINS_DIRS ]; then
  export FLUME_PLUGINS_DIRS=\$PARCELS_ROOT/\$SOLR_DIRNAME/lib/flume-plugin
else
  export FLUME_PLUGINS_DIRS=\$FLUME_PLUGINS_DIRS:\$PARCELS_ROOT/\$SOLR_DIRNAME/lib/flume-plugin
fi
export CDH_HBASE_INDEXER_HOME=\$PARCELS_ROOT/\$SOLR_DIRNAME/lib/hbase-solr
HBASE_SOLR_DIR=\$PARCELS_ROOT/\$SOLR_DIRNAME/lib/hbase/lib
SPACE_SEPARATED_HBASE_SOLR_JARS=\$HBASE_SOLR_DIR/*.jar
HBASE_SOLR_JARS=\$(echo \$SPACE_SEPARATED_HBASE_SOLR_JARS | sed -e "s/ /:/")
if [ -z \$HBASE_CLASSPATH ]; then
  export HBASE_CLASSPATH=\$HBASE_SOLR_JARS
else
  export HBASE_CLASSPATH=\$HBASE_CLASSPATH:\$HBASE_SOLR_JARS
fi
__EOT__
) > build/meta/solr_env.sh

# solr_alternatives.sh
BINARIES="solrctl hbase-indexer"

CONFDIRS="solr"
# Some services are 'special' and use conf.empty instead of conf.dist
EMPTY_CONFDIRS=""

cat > build/meta/solr_alternatives.sh <<__EOT__
#!/bin/bash
PRIORITY=10
SOLR_DIRNAME=\${PARCEL_DIRNAME:-"SOLR-$DISTRO_LESS_FULL_VERSION"}

__EOT__

if egrep -i $SUSE_RELEASES /etc/*release; then
cat >> build/meta/solr_alternatives.sh <<__EOT__
function safe_deregister_bin {
  BINARY=\$1
  # If the binary doesn't exist, simply deregister it, since we need to keep alternatives DB in sync
  if [ ! -e /usr/bin/\$BINARY ]; then
    update-alternatives --remove \$BINARY \$PARCELS_ROOT/\$SOLR_DIRNAME/bin/\$BINARY
  # If the binary is a symlink pointing to alternatives, then we will just let alternatives manage the removal
  elif [ -L /usr/bin/\$BINARY ] && [ "\$(readlink /usr/bin/\$BINARY)" = "/etc/alternatives/\$BINARY" ]; then
    update-alternatives --remove \$BINARY \$PARCELS_ROOT/\$SOLR_DIRNAME/bin/\$BINARY
    # Otherwise, we have to defensively remove it
  else
    # Make a copy of the binary if it's not managed by alternatives
    cp /usr/bin/\$BINARY /usr/bin/\${BINARY}~
    # Then deregister the alternative, which on SLES may remove the physical file
    update-alternatives --remove \$BINARY \$PARCELS_ROOT/\$SOLR_DIRNAME/bin/\$BINARY
    # If the file was in fact removed during the de-registration process, restore it
    if [ ! -e /usr/bin/\$BINARY ]; then
      mv /usr/bin/\${BINARY}~ /usr/bin/\$BINARY
    fi
    # In all cases, forcefully remove the backup
    rm -f /usr/bin/\${BINARY}~
  fi
}

__EOT__
fi
cat >> build/meta/solr_alternatives.sh <<__EOT__

if [[ "\$1" == "activate" ]]; then
__EOT__

for BINARY in $BINARIES; do
  echo \
    "  update-alternatives --install /usr/bin/$BINARY $BINARY \$PARCELS_ROOT/\$SOLR_DIRNAME/bin/$BINARY \$PRIORITY" \
    >> build/meta/solr_alternatives.sh
done

for CONFDIR in $CONFDIRS; do
  echo "  mkdir -p /etc/$CONFDIR" >> build/meta/solr_alternatives.sh
  echo \
    "  update-alternatives --install /etc/$CONFDIR/conf $CONFDIR-conf \$PARCELS_ROOT/\$SOLR_DIRNAME/etc/$CONFDIR/conf.dist \$PRIORITY" \
    >> build/meta/solr_alternatives.sh
done

for CONFDIR in $EMPTY_CONFDIRS; do
  echo "  mkdir -p /etc/$CONFDIR" >> build/meta/solr_alternatives.sh
  echo \
    "  update-alternatives --install /etc/$CONFDIR/conf $CONFDIR-conf \$PARCELS_ROOT/\$SOLR_DIRNAME/etc/$CONFDIR/conf.empty \$PRIORITY" \
    >> build/meta/solr_alternatives.sh
done

cat >> build/meta/solr_alternatives.sh <<__EOT__

elif [[ "\$1" == "deactivate" ]]; then

__EOT__

for BINARY in $BINARIES; do
  if egrep -i $SUSE_RELEASES /etc/*release; then
    echo \
      "  safe_deregister_bin \"$BINARY\"" >> build/meta/solr_alternatives.sh
  else
    echo \
      "  update-alternatives --remove $BINARY \$PARCELS_ROOT/\$SOLR_DIRNAME/bin/$BINARY" \
      >> build/meta/solr_alternatives.sh
  fi
done

for CONFDIR in $CONFDIRS; do
  echo \
    "  update-alternatives --remove $CONFDIR-conf \$PARCELS_ROOT/\$SOLR_DIRNAME/etc/$CONFDIR/conf.dist" \
    >> build/meta/solr_alternatives.sh
  echo "  rmdir --ignore-fail-on-non-empty /etc/$CONFDIR" >> build/meta/solr_alternatives.sh
done

for CONFDIR in $EMPTY_CONFDIRS; do
  echo \
    "  update-alternatives --remove $CONFDIR-conf \$PARCELS_ROOT/\$SOLR_DIRNAME/etc/$CONFDIR/conf.empty" \
    >> build/meta/solr_alternatives.sh
  echo "  rmdir --ignore-fail-on-non-empty /etc/$CONFDIR" >> build/meta/solr_alternatives.sh
done

cat >> build/meta/solr_alternatives.sh <<__EOT__

fi

__EOT__
chmod +x build/meta/solr_alternatives.sh
#TODO: Introduce this to CDH parcel and impala parcel for consistency
mkdir -p build/usr/bin

# Magically manipulate the bin scripts to point to ../lib instead of /usr/lib
# Ideally we would want alternatives configuration for bin scripts as well
#TODO: Introduce this to CDH parcel and Impala parcel for consistency
for file in `find build/usr/bin -type f`; do
  # Insert a command that sets the LIB_DIR we want to use
  sed -i '1a \
  # Reference: http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in\
  SOURCE="${BASH_SOURCE[0]}"\
  BIN_DIR="$( dirname "$SOURCE" )"\
  while [ -h "$SOURCE" ]\
  do\
    SOURCE="$(readlink "$SOURCE")"\
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"\
    BIN_DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"\
  done\
  BIN_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"\
  LIB_DIR=$BIN_DIR/../lib' $file
  # Replace /usr/libexec with the libexec dir from within the parcel
  # Replace /usr/lib with the LIB_DIR variable we set in the above line
  # Replace all instances of /etc/default to relatively point to <parcel root>/etc/default
  # Replace default shell in shell scripts to be explicitly bash (since default shell in debian/ubuntu shell is dash)
  sed -i -e 's:/usr/libexec/:\$BIN_DIR/../libexec/:' \
  -e 's:/usr/lib/:\$LIB_DIR/:' \
  -e 's:/etc/default:$BIN_DIR/../etc/default:' \
  -e 's:#!/bin/sh:#!/bin/bash:' $file
done

# Flume plugin directory has certain limitations. It expects the path you provide to have a bunch of directories
# Each of these directories is called a plugin directory. Inside this plugin directory should be lib, libext and native folders
# that include the relevant bits for the plugin. This doesn't work well in parcels because we can only specify <parcel root>/lib
# as flume plugin dir but that would mean that other jars like search jars, etc. would be included in flume's classpath. There are
# way to many jars in question here so we can't ignore it. Hence we have to do this hack where we create a separate top level directory
# exists only in Solr parcels and inside it is a link that points to flume-ng in <parcel root>/lib/, this way we add one more level
# of indirection that is required by Flume plugins dir functionality without adding any unnecessary jars to flume's classpath
rm -rf build/usr/lib/flume-plugin
mkdir build/usr/lib/flume-plugin
ln -s ../flume-ng build/usr/lib/flume-plugin/flume-ng
