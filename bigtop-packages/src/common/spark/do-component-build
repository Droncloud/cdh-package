#!/bin/bash
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -ex

if [ -z "$GIT_REPO" ]; then

  if [ -z "${DO_MAVEN_DEPLOY}" ]; then
      MAVEN_INST_DEPLOY=install
  else
      MAVEN_INST_DEPLOY=$DO_MAVEN_DEPLOY
  fi

  BUILD_OPTS="-Divy.home=${HOME}/.ivy2 -Dsbt.ivy.home=${HOME}/.ivy2 -Duser.home=${HOME} \
              -Drepo.maven.org=$IVY_MIRROR_PROP \
              -Dreactor.repo=file://${HOME}/.m2/repository${M2_REPO_SUFFIX} \
              -DskipTests -DrecompileMode=all"
  ## this might be an issue at times
  #        http://maven.40175.n5.nabble.com/Not-finding-artifact-in-local-repo-td3727753.html
  export MAVEN_OPTS="-Xmx2g -XX:ReservedCodeCacheSize=512m -XX:PermSize=1024m -XX:MaxPermSize=1024m"

  mkdir -p target/zinc
  MYMVN=$PWD/$(mktemp -p target mvn.XXXXXXXXXX)
  cat >$MYMVN <<EOF
#!/bin/sh
export ZINC_OPTS="-Dzinc.dir=$PWD/target/zinc -Xmx2g -XX:MaxPermSize=512M -XX:ReservedCodeCacheSize=512m"
export APACHE_MIRROR=http://archive-primary.cloudera.com/tarballs/apache
exec $PWD/build/mvn --force "\$@" $CAULDRON_MAVEN_EXTRA_ARGS
EOF
  chmod 700 $MYMVN

  ./make-distribution.sh  --mvn $MYMVN --target $MAVEN_INST_DEPLOY --skip-java-test -Dcdh.build=true $CAULDRON_MAVEN_EXTRA_ARGS $BUILD_OPTS
  rm -f $MYMVN

  rm -rf build
  mkdir -p build/spark-${FULL_VERSION}

  mv dist/* build/spark-${FULL_VERSION}
  (cd build ; tar zcf spark-${FULL_VERSION}.tar.gz spark-${FULL_VERSION}/ ; rm -rf spark-${FULL_VERSION}/)

else
    git add .
    git commit -a -m "Temporary commit for tarball"
    mkdir -p build
    git archive --prefix=spark-${FULL_VERSION}/ --format=tar HEAD |gzip > build/spark-${FULL_VERSION}.tar.gz
fi
