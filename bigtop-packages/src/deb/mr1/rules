#!/usr/bin/make -f
# -*- makefile -*-
SHELL=/bin/bash

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

# This has to be exported to make some magic below work.
export DH_OPTIONS

ifeq (${DEB_BUILD_ARCH},amd64)
  native_dir=Linux-amd64-64
endif
ifeq (${DEB_BUILD_ARCH},i386)
  native_dir=Linux-i386-32
endif

jar_deps_hadoop=hadoop-annotations,hadoop-auth,hadoop-common,hadoop-hdfs
conf_pseudo=README,hadoop-metrics.properties,core-site.xml,hdfs-site.xml,mapred-site.xml,log4j.properties

#Architecture
build: build-stamp
build-stamp:
	dh_testdir
	/usr/bin/env -u DISPLAY \
          FULL_VERSION=${HADOOP_MR1_PATCHED_VERSION} \
          JAVA_HOME="/usr/lib/jvm/java-6-sun" \
          DO_MAVEN_DEPLOY="" \
          SKIP_MVN_EXPLICIT="TRUE" \
          SKIP_EXTRA_NATIVE="TRUE" \
          sh -x debian/do-component-build
	touch $@

clean:  
	dh_testdir
	dh_testroot
	rm -f build-arch-stamp build-indep-stamp build-stamp
	ant -Dcdh.maven=true clean

	dh_clean

install: build
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_installdirs

	bash debian/install_hadoop.sh \
	  --cloudera-source-dir=cloudera/files \
	  --build-dir=build/hadoop-${HADOOP_MR1_PATCHED_VERSION} \
	  --src-dir=debian/tmp/usr/src/hadoop-0.20-mapreduce \
	  --lib-dir=debian/tmp/usr/lib/hadoop-0.20-mapreduce \
	  --etc-dir=debian/tmp/etc/hadoop \
	  --prefix=debian/tmp \
	  --apache-branch=0.20 \
	  --doc-dir=debian/tmp/usr/share/doc/hadoop-0.20-mapreduce-doc \
	  --example-dir=debian/tmp/usr/share/doc/hadoop-0.20-mapreduce/examples \
	  --native-build-string=${native_dir} \
	  --system-lib-dir=/usr/lib/hadoop-0.20-mapreduce/lib/native \
	  --system-include-dir=/usr/lib/hadoop-0.20-mapreduce/include \
	  --installed-lib-dir=/usr/lib/hadoop-0.20-mapreduce
	# Workaround for BIGTOP-583
	rm -f debian/tmp/usr/lib/hadoop-0.20-mapreduce/lib/slf4j-log4j12-*.jar
	# We need to link to the jar files provided by Hadoop 0.23 implementation
	rm -f debian/tmp/usr/lib/hadoop-0.20-mapreduce/lib/{${jar_deps_hadoop}}*.jar
	mkdir -p debian/tmp/etc/hadoop/conf.pseudo.mr1
	cp -f debian/{$(conf_pseudo)} debian/tmp/etc/hadoop/conf.pseudo.mr1
	mkdir -p debian/tmp/etc/security/limits.d
	cp debian/mapred.conf debian/tmp/etc/security/limits.d

# Run dh_lintian if we've got it - this doesn't exist on debhelper 6 (eg Ubuntu Hardy)
	(dh_lintian) || /bin/true


install-indep:
	sh debian/install_init_scripts.sh
	dh_install --sourcedir=debian/tmp -i

install-arch:
	mkdir -p debian/tmp/etc/default
	cp debian/hadoop-0.20.default debian/tmp/etc/default/hadoop-0.20
	dh_install --sourcedir=debian/tmp -s
#	chmod 6754 debian/hadoop-0.20-mapreduce/usr/lib/hadoop-0.20-mapreduce/sbin/${native_dir}/task-controller

# Must not depend on anything. This is to be called by
# binary-arch/binary-indep
# in another 'make' thread.
binary-common:  
	dh_testdir
	dh_testroot
	dh_installchangelogs CHANGES.txt -phadoop-0.20-mapreduce
	dh_installdocs
	sh debian/append_licenses.sh
#	dh_installexamples
#	dh_installmenu
#	dh_installdebconf
#	dh_installlogrotate
#	dh_installemacsen
#	dh_installpam
#	dh_installmime
#	dh_python
#	dh_installinit
#	dh_installcron
#	dh_installinfo
	dh_installman
	dh_link
	dh_strip
	dh_compress
	dh_fixperms -Xtask-controller
#	dh_perl
	dh_makeshlibs
	dh_installdeb
	dh_shlibdeps
	dh_gencontrol -- -Vhadoop_common_version=${HADOOP_COMMON_VERSION}
	dh_md5sums
	dh_builddeb

# Build architecture independant packages using the common target.
binary-indep: build install install-indep
	$(MAKE) -f debian/rules DH_OPTIONS=-i binary-common

# Build architecture dependant packages using the common target.
binary-arch: build install install-arch
	$(MAKE) -f debian/rules DH_OPTIONS=-s binary-common

binary: binary-arch binary-indep
.PHONY: build clean binary-indep binary-arch binary install configure
